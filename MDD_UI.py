# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Anik\Desktop\UI\mini_mdd.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
######################################################
import sys
import os

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtWidgets import QFileDialog

######## for resize
from PyQt5.QtWidgets import QWidget
##################### for avoiding recursion error
#sys.setrecursionlimit(sys.getrecursionlimit() * 5)
######################################################
# loading trained model import
import mne

import numpy as np

import tensorflow as tf


from sklearn.model_selection import GroupKFold, LeaveOneGroupOut
from sklearn.preprocessing import StandardScaler
##################################################

def resource_path(relative_path):
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)
#######################################################

class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(394, 427)
        #
        MainWindow.setFixedSize(394,427)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        self.frame_3.setGeometry(QtCore.QRect(0, 0, 391, 401))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.pushButton = QtWidgets.QPushButton(self.frame_3)
        ####### load function calling
        self.pushButton.clicked.connect(self.loading)

        self.pushButton.setGeometry(QtCore.QRect(20, 80, 161, 61))
        self.pushButton.setStyleSheet("QPushButton{\n"
"background-color:rgb(0, 170, 127);\n"
"border: none;\n"
"padding: 5px;\n"
"font: 75 15pt \"Candara\";\n"
"color:rgb(255, 255, 255);\n"
"\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgb(255, 165, 0);\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"background-color: rgb(242, 165, 255);\n"
"}\n"
"")
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(self.frame_3)
        self.label.setGeometry(QtCore.QRect(20, 10, 351, 51))
        self.label.setStyleSheet("QLabel{\n"
"background-color: qlineargradient(spread:pad, x1:0.305, y1:0.227273, x2:0.789, y2:0.738636, stop:0 rgba(18, 109, 132, 255), stop:1 rgba(221, 118, 241, 255));\n"
"border: none;\n"
"padding: 5px;\n"
"font: 75 12pt \"Candara\";\n"
"color:rgb(255, 255, 255);\n"
"\n"
"}\n"
"\n"
"")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.pushButton_2 = QtWidgets.QPushButton(self.frame_3)
        # button 2 caling 
        self.pushButton_2.clicked.connect(self.diagnosis)

        self.pushButton_2.setGeometry(QtCore.QRect(210, 80, 161, 61))
        self.pushButton_2.setStyleSheet("QPushButton{\n"
"background-color: rgb(56, 146, 166);\n"
"border: none;\n"
"padding: 5px;\n"
"font: 75 15pt \"Candara\";\n"
"color:rgb(255, 255, 255);\n"
"\n"
"}\n"
"QPushButton:hover{\n"
"background-color:rgb(255, 165, 0)\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"background-color: rgb(242, 165, 255);\n"
"}\n"
"")
        self.pushButton_2.setObjectName("pushButton_2")
        self.label_2 = QtWidgets.QLabel(self.frame_3)
        self.label_2.setGeometry(QtCore.QRect(20, 320, 161, 61))
        self.label_2.setStyleSheet("QLabel{\n"
"background-color: rgb(52, 136, 94);\n"
"border: none;\n"
"padding: 5px;\n"
"font: 75 15pt \"Candara\";\n"
"color:rgb(255, 255, 255);\n"
"\n"
"}\n"
"\n"
"")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.textEdit = QtWidgets.QTextEdit(self.frame_3)
        self.textEdit.setGeometry(QtCore.QRect(20, 240, 351, 61))
        self.textEdit.setStyleSheet("QTextEdit{\n"
"background-color: rgb(81, 213, 147);\n"
"border: none;\n"
"padding: 5px;\n"
"font: 75 20pt \"Candara\";\n"
"color:rgb(255, 255, 255);\n"
"}\n"
"\n"
"")
        self.textEdit.setObjectName("textEdit")
        self.textEdit_2 = QtWidgets.QTextEdit(self.frame_3)
        self.textEdit_2.setGeometry(QtCore.QRect(210, 320, 161, 61))
        self.textEdit_2.setStyleSheet("QTextEdit{\n"
"background-color:rgb(129, 153, 156);\n"
"border: none;\n"
"padding: 5px;\n"
"font: 75 20pt \"Candara\";\n"
"color:rgb(255, 255, 255);\n"
"}\n"
"\n"
"")
        self.textEdit_2.setObjectName("textEdit_2")
        self.label_3 = QtWidgets.QLabel(self.frame_3)
        self.label_3.setGeometry(QtCore.QRect(20, 170, 351, 51))
        self.label_3.setStyleSheet("QLabel{\n"
"background-color: qlineargradient(spread:pad, x1:0.305, y1:0.227273, x2:0.789, y2:0.738636, stop:0 rgba(18, 109, 132, 255), stop:1 rgba(221, 118, 241, 255));\n"
"border: none;\n"
"padding: 5px;\n"
"font: 75 12pt \"Candara\";\n"
"color:rgb(255, 255, 255);\n"
"\n"
"}\n"
"\n"
"")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 394, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)




        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Load"))
        self.label.setText(_translate("MainWindow", "Press Load to load EEG file"))
        self.pushButton_2.setText(_translate("MainWindow", "Diagnosis"))
        self.label_2.setText(_translate("MainWindow", "Accuracy :"))
        self.label_3.setText(_translate("MainWindow", "This Signal Represents :"))


    def loading(self):   

        #loading a file/image
        loadedim, _ = QFileDialog.getOpenFileName()  

        # passing the loaded file to test
        global test_eeg_path
        test_eeg_path = loadedim
        print(test_eeg_path)

        # plotting 
        raw = mne.io.read_raw_edf(test_eeg_path, preload=True)
        raw.plot(title='Selected EEG Signal')
        self.textEdit.setText("Press Diagnosis") 
        self.textEdit_2.setText(' ')


    def diagnosis(self):
 
        #print('clicked')
        ################################ Filtering and plotting
        raw = mne.io.read_raw_edf(test_eeg_path, preload=True)
        lowf = 30
        highf = 100
        filtered_eeg = raw.filter(l_freq=lowf,h_freq=highf) 
        filtered_eeg.plot(title='Gamma Wave in the EEG')
        ### epoching
        epochs = mne.make_fixed_length_epochs(filtered_eeg,duration=15,overlap=1)
        data = epochs.get_data()

        # stdizion
        scaler = StandardScaler()
        data = scaler.fit_transform(data.reshape(-1,data.shape[-1])).reshape(data.shape)
        data = np.moveaxis(data,1,2)

        result = new_model.predict(data)
        predict_value = np.mean(result)

        if predict_value < 0.5 :
                self.textEdit.setText('MDD Patient')
                self.textEdit_2.setText(f'{(1-predict_value)*100} %')
        else :
                self.textEdit.setText('Healthy') 
                self.textEdit_2.setText(f'{(predict_value)*100} %')

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    #trained_file = "./t_15_sec_gamma.h5"
    trained_file = resource_path("t_15_sec_gamma.h5")
    global new_model
    new_model = tf.keras.models.load_model(trained_file)
    #print(new_model.summary())

    sys.exit(app.exec_())
